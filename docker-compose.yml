version: '3'
services:

  # kafdrop:
  #   image: obsidiandynamics/kafdrop:latest
  #   container_name: kafdrop-iu
  #   networks: 
  #     - kafka-net
  #   depends_on:
  #     - zookeeper
  #     - kafka
  #   ports:
  #     - 19000:9000
  #   environment:
  #     KAFKA_BROKERCONNECT: kafka:29092

  kowl:
    image: quay.io/cloudhut/kowl:master
    container_name: kowl-iu
    networks: 
      - kafka-net
    depends_on:
      - zookeeper
      - kafka
    ports:
      - 8080:8080
    restart: always
    environment:
      KAFKA_BROKERS: kafka:29092

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    networks: 
      - kafka-net
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    networks: 
      - kafka-net
    depends_on:
      - zookeeper
    restart: always
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # schema-registry:
  #   image: confluentinc/cp-schema-registry
  #   networks: 
  #     - kafka-net
  #   depends_on:
  #     - zookeeper
  #     - kafka
  #   restart: always
  #   environment:
  #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:29092'
  #     SCHEMA_REGISTRY_HOST_NAME: 'schema-registry'
  #     SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8085'
  #     SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: 'INFO'

networks: 
  kafka-net:
    driver: bridge